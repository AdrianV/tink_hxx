// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var _$Dummy_AttrVal_$Impl_$ = {};
_$Dummy_AttrVal_$Impl_$.__name__ = ["_Dummy","AttrVal_Impl_"];
_$Dummy_AttrVal_$Impl_$.ofBool = function(b) {
	if(b) {
		return "";
	} else {
		return null;
	}
};
var _$Dummy_Dummy_$Impl_$ = {};
_$Dummy_Dummy_$Impl_$.__name__ = ["_Dummy","Dummy_Impl_"];
_$Dummy_Dummy_$Impl_$.tag = function(name,attr,children) {
	return { name : name, attr : attr, children : children};
};
_$Dummy_Dummy_$Impl_$.format = function(this1) {
	var _g = this1.name;
	switch(_g) {
	case "":
		var ret = "";
		var _g1 = 0;
		var _g11 = this1.children;
		while(_g1 < _g11.length) {
			var c = _g11[_g1];
			++_g1;
			ret += _$Dummy_Dummy_$Impl_$.format(c);
		}
		return ret;
	case "--text":
		return this1.attr["content"];
	default:
		var v = _g;
		var ret1 = "<" + v;
		var _g2 = [];
		var _g12 = 0;
		var _g21 = Reflect.fields(this1.attr);
		while(_g12 < _g21.length) {
			var key = _g21[_g12];
			++_g12;
			_g2.push(key);
		}
		var keys = _g2;
		keys.sort(Reflect.compare);
		var _g13 = 0;
		while(_g13 < keys.length) {
			var key1 = keys[_g13];
			++_g13;
			var _g3 = this1.attr[key1];
			var ret2;
			if(_g3 == null) {
				ret2 = "";
			} else if(_g3 == "") {
				ret2 = " " + key1;
			} else {
				var v1 = _g3;
				ret2 = " " + key1 + "=\"" + v1 + "\"";
			}
			ret1 += ret2;
		}
		ret1 += ">";
		if(this1.children != null) {
			var _g14 = 0;
			var _g22 = this1.children;
			while(_g14 < _g22.length) {
				var c1 = _g22[_g14];
				++_g14;
				ret1 += _$Dummy_Dummy_$Impl_$.format(c1);
			}
		}
		return ret1 + ("</" + v + ">");
	}
};
_$Dummy_Dummy_$Impl_$.toArray = function(this1) {
	return [this1];
};
_$Dummy_Dummy_$Impl_$.ofArray = function(a) {
	return _$Dummy_Dummy_$Impl_$.tag("",{ },a);
};
_$Dummy_Dummy_$Impl_$.text = function(s) {
	return _$Dummy_Dummy_$Impl_$.tag("--text",{ content : s},null);
};
_$Dummy_Dummy_$Impl_$["int"] = function(i) {
	return _$Dummy_Dummy_$Impl_$.text(i == null ? "null" : "" + i);
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
var List = function() {
	this.length = 0;
};
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
Math.__name__ = ["Math"];
var Reflect = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var haxe_unit_TestCase = function() {
};
haxe_unit_TestCase.__name__ = ["haxe","unit","TestCase"];
haxe_unit_TestCase.prototype = {
	currentTest: null
	,setup: function() {
	}
	,tearDown: function() {
	}
	,print: function(v) {
		haxe_unit_TestRunner.print(v);
	}
	,assertTrue: function(b,c) {
		this.currentTest.done = true;
		if(b != true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected true but was false";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,assertFalse: function(b,c) {
		this.currentTest.done = true;
		if(b == true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected false but was true";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,assertEquals: function(expected,actual,c) {
		this.currentTest.done = true;
		if(actual != expected) {
			this.currentTest.success = false;
			this.currentTest.error = "expected '" + Std.string(expected) + "' but was '" + Std.string(actual) + "'";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,__class__: haxe_unit_TestCase
};
var RunTests = function() {
	haxe_unit_TestCase.call(this);
};
RunTests.__name__ = ["RunTests"];
RunTests.main = function() {
	var r = new haxe_unit_TestRunner();
	r.add(new RunTests());
	process.exit(r.run() ? 0 : 500);
};
RunTests.__super__ = haxe_unit_TestCase;
RunTests.prototype = $extend(haxe_unit_TestCase.prototype,{
	assertDeepEqual: function(a,b,pos) {
		var _g = deepequal_DeepEqual.compare(a,b,pos);
		switch(_g[1]) {
		case 0:
			this.assertTrue(true,{ fileName : "RunTests.hx", lineNumber : 21, className : "RunTests", methodName : "assertDeepEqual"});
			break;
		case 1:
			var e = _g[2];
			this.currentTest.success = false;
			this.currentTest.posInfos = pos;
			this.currentTest.error = e.message;
			throw new js__$Boot_HaxeError(this.currentTest);
			break;
		}
	}
	,test: function() {
		this.assertDeepEqual([_$Dummy_Dummy_$Impl_$.tag("test",{ })],_$Dummy_Dummy_$Impl_$.toArray(_$Dummy_Dummy_$Impl_$.tag("test",{ },null)),{ fileName : "RunTests.hx", lineNumber : 26, className : "RunTests", methodName : "test"});
		this.assertDeepEqual([_$Dummy_Dummy_$Impl_$.tag("test",{ })],_$Dummy_Dummy_$Impl_$.toArray(_$Dummy_Dummy_$Impl_$.tag("test",{ },null)),{ fileName : "RunTests.hx", lineNumber : 27, className : "RunTests", methodName : "test"});
		this.assertDeepEqual([_$Dummy_Dummy_$Impl_$.tag("test",{ })],_$Dummy_Dummy_$Impl_$.toArray(_$Dummy_Dummy_$Impl_$.tag("test",{ },null)),{ fileName : "RunTests.hx", lineNumber : 28, className : "RunTests", methodName : "test"});
		this.assertDeepEqual([_$Dummy_Dummy_$Impl_$.tag("test",{ })],_$Dummy_Dummy_$Impl_$.toArray(_$Dummy_Dummy_$Impl_$.tag("test",{ },null)),{ fileName : "RunTests.hx", lineNumber : 29, className : "RunTests", methodName : "test"});
		this.assertDeepEqual([_$Dummy_Dummy_$Impl_$.tag("test",{ })],_$Dummy_Dummy_$Impl_$.toArray(_$Dummy_Dummy_$Impl_$.tag("test",{ },null)),{ fileName : "RunTests.hx", lineNumber : 30, className : "RunTests", methodName : "test"});
		this.assertDeepEqual([_$Dummy_Dummy_$Impl_$.tag("test",{ })],_$Dummy_Dummy_$Impl_$.toArray(_$Dummy_Dummy_$Impl_$.tag("test",{ },null)),{ fileName : "RunTests.hx", lineNumber : 31, className : "RunTests", methodName : "test"});
		this.assertDeepEqual([_$Dummy_Dummy_$Impl_$.tag("test",{ })],_$Dummy_Dummy_$Impl_$.toArray(_$Dummy_Dummy_$Impl_$.tag("test",{ },null)),{ fileName : "RunTests.hx", lineNumber : 32, className : "RunTests", methodName : "test"});
		var tmp = _$Dummy_Dummy_$Impl_$.text("   ");
		this.assertDeepEqual([_$Dummy_Dummy_$Impl_$.tag("test",{ },[tmp])],_$Dummy_Dummy_$Impl_$.toArray(_$Dummy_Dummy_$Impl_$.tag("test",{ },[_$Dummy_Dummy_$Impl_$.text("   ")])),{ fileName : "RunTests.hx", lineNumber : 33, className : "RunTests", methodName : "test"});
		var _g = [];
		var _g1 = 0;
		while(_g1 < 100) {
			var i = _g1++;
			_g.push(i);
		}
		var numbers = _g;
		var _g11 = [];
		var _g2 = 0;
		while(_g2 < 4) {
			var i1 = _g2++;
			_g11.push(_$Dummy_Dummy_$Impl_$.tag("button",{ },[_$Dummy_Dummy_$Impl_$["int"](i1)]));
		}
		var tmp1 = [_$Dummy_Dummy_$Impl_$.tag("div",{ },_g11)];
		var tmp2 = numbers.shift();
		var tmp3 = _$Dummy_Dummy_$Impl_$.tag("button",{ },[_$Dummy_Dummy_$Impl_$["int"](tmp2)]);
		var tmp4 = numbers.shift();
		var tmp5 = _$Dummy_Dummy_$Impl_$.tag("button",{ },[_$Dummy_Dummy_$Impl_$["int"](tmp4)]);
		var tmp6 = numbers.shift();
		var tmp7 = _$Dummy_Dummy_$Impl_$.tag("button",{ },[_$Dummy_Dummy_$Impl_$["int"](tmp6)]);
		var tmp8 = numbers.shift();
		var tmp9 = _$Dummy_Dummy_$Impl_$.tag("button",{ },[_$Dummy_Dummy_$Impl_$["int"](tmp8)]);
		this.assertDeepEqual(tmp1,_$Dummy_Dummy_$Impl_$.toArray(_$Dummy_Dummy_$Impl_$.tag("div",{ },[tmp3,tmp5,tmp7,tmp9])),{ fileName : "RunTests.hx", lineNumber : 37, className : "RunTests", methodName : "test"});
		var foo = _$Dummy_Dummy_$Impl_$.tag("foo",{ });
		var tmp10 = numbers.shift();
		_$Dummy_Dummy_$Impl_$.toArray(_$Dummy_Dummy_$Impl_$.tag("button",{ },[_$Dummy_Dummy_$Impl_$["int"](tmp10)]));
		var tmp11 = _$Dummy_Dummy_$Impl_$.text(" test ");
		var tmp12 = _$Dummy_Dummy_$Impl_$.text("test");
		var tmp13 = _$Dummy_Dummy_$Impl_$.text(" ");
		var tmp14 = [_$Dummy_Dummy_$Impl_$.tag("test",{ },[tmp11,foo,tmp12,foo,tmp13])];
		var tmp15 = _$Dummy_Dummy_$Impl_$.text(" test ");
		var tmp16 = _$Dummy_Dummy_$Impl_$.text("test");
		this.assertDeepEqual(tmp14,_$Dummy_Dummy_$Impl_$.toArray(_$Dummy_Dummy_$Impl_$.tag("test",{ },[tmp15,foo,tmp16,foo,_$Dummy_Dummy_$Impl_$.text(" ")])),{ fileName : "RunTests.hx", lineNumber : 52, className : "RunTests", methodName : "test"});
		var tmp17 = _$Dummy_Dummy_$Impl_$.text("  ");
		var tmp18 = _$Dummy_Dummy_$Impl_$.text(" ");
		var tmp19 = [_$Dummy_Dummy_$Impl_$.tag("test",{ },[tmp17,tmp18])];
		var tmp20 = _$Dummy_Dummy_$Impl_$.text("  ");
		this.assertDeepEqual(tmp19,_$Dummy_Dummy_$Impl_$.toArray(_$Dummy_Dummy_$Impl_$.tag("test",{ },[tmp20,_$Dummy_Dummy_$Impl_$.text(" ")])),{ fileName : "RunTests.hx", lineNumber : 53, className : "RunTests", methodName : "test"});
		this.assertDeepEqual([_$Dummy_Dummy_$Impl_$.tag("foo",{ }),_$Dummy_Dummy_$Impl_$.text(" "),_$Dummy_Dummy_$Impl_$.tag("bar",{ }),_$Dummy_Dummy_$Impl_$.tag("baz",{ })],[_$Dummy_Dummy_$Impl_$.tag("foo",{ },null),_$Dummy_Dummy_$Impl_$.text(" "),_$Dummy_Dummy_$Impl_$.tag("bar",{ },null),_$Dummy_Dummy_$Impl_$.tag("baz",{ },null)],{ fileName : "RunTests.hx", lineNumber : 54, className : "RunTests", methodName : "test"});
		this.assertDeepEqual([_$Dummy_Dummy_$Impl_$.tag("test",{ },[_$Dummy_Dummy_$Impl_$.text("foo")])],_$Dummy_Dummy_$Impl_$.toArray(_$Dummy_Dummy_$Impl_$.tag("test",{ },[_$Dummy_Dummy_$Impl_$.text("foo")])),{ fileName : "RunTests.hx", lineNumber : 56, className : "RunTests", methodName : "test"});
		this.assertDeepEqual([_$Dummy_Dummy_$Impl_$.tag("test",{ },[_$Dummy_Dummy_$Impl_$.text(" foo")])],_$Dummy_Dummy_$Impl_$.toArray(_$Dummy_Dummy_$Impl_$.tag("test",{ },[_$Dummy_Dummy_$Impl_$.text(" foo")])),{ fileName : "RunTests.hx", lineNumber : 57, className : "RunTests", methodName : "test"});
		this.assertDeepEqual([_$Dummy_Dummy_$Impl_$.tag("test",{ },[_$Dummy_Dummy_$Impl_$.text("foo  ")])],_$Dummy_Dummy_$Impl_$.toArray(_$Dummy_Dummy_$Impl_$.tag("test",{ },[_$Dummy_Dummy_$Impl_$.text("foo  ")])),{ fileName : "RunTests.hx", lineNumber : 58, className : "RunTests", methodName : "test"});
	}
	,testSplat: function() {
		var o1 = { foo : "o1", bar : "123"};
		var o2 = { foo : "o2", baz : "o2"};
		var __0 = o1;
		var __1 = o2;
		this.assertEquals("<div bar=\"321\" baz=\"o2\" foo=\"o1\"></div>",_$Dummy_Dummy_$Impl_$.format(_$Dummy_Dummy_$Impl_$.toArray(_$Dummy_Dummy_$Impl_$.tag("div",{ bar : "321", foo : __0.foo, baz : __1.baz},null))[0]),{ fileName : "RunTests.hx", lineNumber : 64, className : "RunTests", methodName : "testSplat"});
	}
	,testControl: function() {
		var other = _$Dummy_Dummy_$Impl_$.toArray(_$Dummy_Dummy_$Impl_$.tag("other",{ },null));
		var _g = [];
		var _g1 = 0;
		while(_g1 < 5) {
			var i = _g1++;
			_g.push(_$Dummy_Dummy_$Impl_$.ofArray([i == 0 ? _$Dummy_Dummy_$Impl_$.ofArray([_$Dummy_Dummy_$Impl_$.tag("zero",{ },null)]) : _$Dummy_Dummy_$Impl_$.ofArray([i == 1 ? _$Dummy_Dummy_$Impl_$.ofArray([_$Dummy_Dummy_$Impl_$.tag("one",{ },null)]) : _$Dummy_Dummy_$Impl_$.ofArray([i == 2 ? _$Dummy_Dummy_$Impl_$.ofArray([_$Dummy_Dummy_$Impl_$.tag("two",{ },null)]) : _$Dummy_Dummy_$Impl_$.ofArray([_$Dummy_Dummy_$Impl_$.ofArray(other)])])])]));
		}
		var tmp = _$Dummy_Dummy_$Impl_$.ofArray(_g);
		this.assertEquals("<div><zero></zero><one></one><two></two><other></other><other></other></div>",_$Dummy_Dummy_$Impl_$.format(_$Dummy_Dummy_$Impl_$.toArray(_$Dummy_Dummy_$Impl_$.tag("div",{ },[tmp]))[0]),{ fileName : "RunTests.hx", lineNumber : 71, className : "RunTests", methodName : "testControl"});
		var _g11 = [];
		var _g2 = 0;
		while(_g2 < 5) {
			var i1 = _g2++;
			var tmp1;
			switch(i1) {
			case 0:
				tmp1 = _$Dummy_Dummy_$Impl_$.ofArray([_$Dummy_Dummy_$Impl_$.tag("zero",{ },null)]);
				break;
			case 1:
				tmp1 = _$Dummy_Dummy_$Impl_$.ofArray([_$Dummy_Dummy_$Impl_$.tag("one",{ },null)]);
				break;
			default:
				var v = i1;
				if(v == 2) {
					tmp1 = _$Dummy_Dummy_$Impl_$.ofArray([_$Dummy_Dummy_$Impl_$.tag("two",{ },null)]);
				} else {
					tmp1 = _$Dummy_Dummy_$Impl_$.ofArray([_$Dummy_Dummy_$Impl_$.ofArray(other)]);
				}
			}
			_g11.push(_$Dummy_Dummy_$Impl_$.ofArray([tmp1]));
		}
		var tmp2 = _$Dummy_Dummy_$Impl_$.ofArray(_g11);
		this.assertEquals("<div><zero></zero><one></one><two></two><other></other><other></other></div>",_$Dummy_Dummy_$Impl_$.format(_$Dummy_Dummy_$Impl_$.toArray(_$Dummy_Dummy_$Impl_$.tag("div",{ },[tmp2]))[0]),{ fileName : "RunTests.hx", lineNumber : 86, className : "RunTests", methodName : "testControl"});
	}
	,__class__: RunTests
});
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return o.__enum__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
var deepequal_CustomCompare = function() { };
deepequal_CustomCompare.__name__ = ["deepequal","CustomCompare"];
deepequal_CustomCompare.prototype = {
	check: null
	,__class__: deepequal_CustomCompare
};
var deepequal_DeepEqual = function() { };
deepequal_DeepEqual.__name__ = ["deepequal","DeepEqual"];
deepequal_DeepEqual.compare = function(e,a,pos) {
	var _g = deepequal_DeepEqual._compare(e,a,pos);
	switch(_g[1]) {
	case 0:
		var s = _g[2];
		return tink_core_Outcome.Success(s);
	case 1:
		var f = _g[2];
		return tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Expected " + Std.string(e) + " but got " + Std.string(a),f.message,pos));
	}
};
deepequal_DeepEqual._compare = function(e,a,pos) {
	if(e == null) {
		return deepequal_DeepEqual.simple(e,a,{ fileName : "DeepEqual.hx", lineNumber : 23, className : "deepequal.DeepEqual", methodName : "_compare"});
	} else if(js_Boot.__instanceof(e,deepequal_CustomCompare)) {
		var a1 = pos;
		return e.check(a,function(e1,a2) {
			return deepequal_DeepEqual._compare(e1,a2,a1);
		});
	} else if(typeof(e) == "string") {
		if(typeof(a) != "string") {
			return deepequal_DeepEqual.fail("Expected string but got " + Std.string(a),pos);
		}
		return deepequal_DeepEqual.simple(e,a,{ fileName : "DeepEqual.hx", lineNumber : 32, className : "deepequal.DeepEqual", methodName : "_compare"});
	} else if(typeof(e) == "number") {
		if(typeof(a) != "number") {
			return deepequal_DeepEqual.fail("Expected string but got " + Std.string(a),pos);
		}
		return deepequal_DeepEqual.simple(e,a,{ fileName : "DeepEqual.hx", lineNumber : 37, className : "deepequal.DeepEqual", methodName : "_compare"});
	} else if(typeof(e) == "boolean") {
		if(typeof(a) != "boolean") {
			return deepequal_DeepEqual.fail("Expected string but got " + Std.string(a),pos);
		}
		return deepequal_DeepEqual.simple(e,a,{ fileName : "DeepEqual.hx", lineNumber : 42, className : "deepequal.DeepEqual", methodName : "_compare"});
	} else if(js_Boot.__instanceof(e,Date)) {
		if(!js_Boot.__instanceof(a,Date)) {
			return deepequal_DeepEqual.fail("Expected date but got " + Std.string(a),pos);
		}
		return deepequal_DeepEqual.date(e,a,pos);
	} else if((e instanceof Array) && e.__enum__ == null) {
		if(!((a instanceof Array) && a.__enum__ == null)) {
			return deepequal_DeepEqual.fail("Expected array but got " + Std.string(e),pos);
		}
		if(a.length != e.length) {
			return deepequal_DeepEqual.fail("Expected array of length " + Std.string(e.length) + " but got " + Std.string(a.length),pos);
		}
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			var _g2 = deepequal_DeepEqual._compare(e[i],a[i],{ fileName : "DeepEqual.hx", lineNumber : 53, className : "deepequal.DeepEqual", methodName : "_compare"});
			switch(_g2[1]) {
			case 0:
				break;
			case 1:
				var e2 = _g2[2];
				return deepequal_DeepEqual.fail(e2.message + (" at index " + i),{ fileName : "DeepEqual.hx", lineNumber : 55, className : "deepequal.DeepEqual", methodName : "_compare"});
			}
		}
		return deepequal_DeepEqual.success();
	} else if(js_Boot.__instanceof(e,haxe__$Int64__$_$_$Int64)) {
		if(!js_Boot.__instanceof(a,haxe__$Int64__$_$_$Int64)) {
			return deepequal_DeepEqual.fail("Expected int64 but got " + Std.string(a),pos);
		}
		var a3 = e;
		var b = a;
		return deepequal_DeepEqual.bool(a3.high == b.high && a3.low == b.low,{ fileName : "DeepEqual.hx", lineNumber : 64, className : "deepequal.DeepEqual", methodName : "_compare"});
	} else if(Reflect.isEnumValue(e)) {
		var ecls = Type.getEnum(e);
		var acls = Type.getEnum(a);
		if(ecls != acls) {
			return deepequal_DeepEqual.fail("Expected enum value of " + Type.getEnumName(ecls) + " but got " + Std.string(a),pos);
		}
		var a4 = a;
		var e3 = e;
		var _g3 = a4[0];
		var _g11 = e3[0];
		var a5 = _g3;
		var e4 = _g11;
		if(e4 != a5) {
			return deepequal_DeepEqual.fail("Expected " + e4 + " but got " + a5,{ fileName : "DeepEqual.hx", lineNumber : 74, className : "deepequal.DeepEqual", methodName : "_compare"});
		}
		return deepequal_DeepEqual._compare(a4.slice(2),e3.slice(2),pos);
	} else if(js_Boot.__instanceof(e,haxe_io_Bytes)) {
		var e5 = e;
		var a6 = a;
		if(e5.length != a6.length) {
			return deepequal_DeepEqual.fail("Expected bytes of length " + e5.length + " but got " + a6.length,pos);
		}
		var _g12 = 0;
		var _g4 = e5.length;
		while(_g12 < _g4) {
			var i1 = _g12++;
			if(e5.b[i1] != a6.b[i1]) {
				return deepequal_DeepEqual.fail("Expected bytes " + e5.toHex() + " but got " + a6.toHex(),pos);
			}
		}
		return deepequal_DeepEqual.success();
	} else {
		var o = e;
		if((o == null ? null : js_Boot.getClass(o)) != null) {
			var o1 = e;
			var ecls1 = o1 == null ? null : js_Boot.getClass(o1);
			var o2 = a;
			var acls1 = o2 == null ? null : js_Boot.getClass(o2);
			if(ecls1 != acls1) {
				return deepequal_DeepEqual.fail("Expected class instance of " + Type.getClassName(ecls1) + " but got " + Std.string(a),pos);
			}
			var _g5 = 0;
			var _g13 = Type.getInstanceFields(ecls1);
			while(_g5 < _g13.length) {
				var key = _g13[_g5];
				++_g5;
				var _g21 = deepequal_DeepEqual._compare(Reflect.getProperty(e,key),Reflect.getProperty(a,key),pos);
				if(_g21[1] == 1) {
					var f = _g21[2];
					return deepequal_DeepEqual.fail(f.message,pos);
				}
			}
			return deepequal_DeepEqual.success();
		} else if(js_Boot.__instanceof(e,Class)) {
			if(!js_Boot.__instanceof(a,Class)) {
				return deepequal_DeepEqual.fail("Expected " + Std.string(e) + " but got " + Std.string(a),pos);
			}
			return deepequal_DeepEqual.simple(e,a,pos);
		} else if(js_Boot.__instanceof(e,Enum)) {
			if(!js_Boot.__instanceof(a,Enum)) {
				return deepequal_DeepEqual.fail("Expected " + Std.string(e) + " but got " + Std.string(a),pos);
			}
			return deepequal_DeepEqual.simple(e,a,pos);
		} else if(Reflect.isObject(e)) {
			if(!Reflect.isObject(a)) {
				return deepequal_DeepEqual.fail("Expected object but got " + Std.string(a),pos);
			}
			var keys = Reflect.fields(a);
			var _g6 = Reflect.fields(e).length;
			var len = _g6;
			if(len != keys.length) {
				return deepequal_DeepEqual.fail("Expected " + keys.length + " field(s) but got " + len,pos);
			}
			var _g14 = 0;
			while(_g14 < keys.length) {
				var key1 = keys[_g14];
				++_g14;
				var _g22 = deepequal_DeepEqual._compare(Reflect.field(e,key1),Reflect.field(a,key1),pos);
				if(_g22[1] == 1) {
					var f1 = _g22[2];
					return deepequal_DeepEqual.fail(f1.message,pos);
				}
			}
			return deepequal_DeepEqual.success();
		} else {
			throw new js__$Boot_HaxeError("Unhandled case");
		}
	}
};
deepequal_DeepEqual.success = function() {
	return tink_core_Outcome.Success(tink_core_Noise.Noise);
};
deepequal_DeepEqual.fail = function(msg,pos) {
	return tink_core_Outcome.Failure(new tink_core_TypedError(null,msg,pos));
};
deepequal_DeepEqual.bool = function(b,pos) {
	if(b) {
		return deepequal_DeepEqual.success();
	} else {
		return deepequal_DeepEqual.fail("Expected true but got false",pos);
	}
};
deepequal_DeepEqual.simple = function(e,a,pos) {
	if(e == a) {
		return deepequal_DeepEqual.success();
	} else {
		return deepequal_DeepEqual.fail("Expected " + Std.string(e) + " but got " + Std.string(a),pos);
	}
};
deepequal_DeepEqual.date = function(e,a,pos) {
	return deepequal_DeepEqual.simple(e.getTime(),a.getTime(),{ fileName : "DeepEqual.hx", lineNumber : 144, className : "deepequal.DeepEqual", methodName : "date"});
};
var haxe_StackItem = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; return $x; };
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b += cname == null ? "null" : "" + cname;
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe__$Int64__$_$_$Int64 = function() { };
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_ds_Either = { __ename__ : ["haxe","ds","Either"], __constructs__ : ["Left","Right"] };
haxe_ds_Either.Left = function(v) { var $x = ["Left",0,v]; $x.__enum__ = haxe_ds_Either; return $x; };
haxe_ds_Either.Right = function(v) { var $x = ["Right",1,v]; $x.__enum__ = haxe_ds_Either; return $x; };
var haxe_ds_Option = { __ename__ : ["haxe","ds","Option"], __constructs__ : ["Some","None"] };
haxe_ds_Option.Some = function(v) { var $x = ["Some",0,v]; $x.__enum__ = haxe_ds_Option; return $x; };
haxe_ds_Option.None = ["None",1];
haxe_ds_Option.None.__enum__ = haxe_ds_Option;
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g1 = 0;
		var _g = str.length;
		while(_g1 < _g) {
			var i = _g1++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g11 = 0;
		var _g2 = this.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var c = this.b[i1];
			s_b += String.fromCharCode(chars[c >> 4]);
			s_b += String.fromCharCode(chars[c & 15]);
		}
		return s_b;
	}
	,__class__: haxe_io_Bytes
};
var haxe_unit_TestResult = function() {
	this.m_tests = new List();
	this.success = true;
};
haxe_unit_TestResult.__name__ = ["haxe","unit","TestResult"];
haxe_unit_TestResult.prototype = {
	m_tests: null
	,success: null
	,add: function(t) {
		this.m_tests.add(t);
		if(!t.success) {
			this.success = false;
		}
	}
	,toString: function() {
		var buf_b = "";
		var failures = 0;
		var _g_head = this.m_tests.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var test = val;
			if(test.success == false) {
				buf_b += "* ";
				buf_b += Std.string(test.classname);
				buf_b += "::";
				buf_b += Std.string(test.method);
				buf_b += "()";
				buf_b += "\n";
				buf_b += "ERR: ";
				if(test.posInfos != null) {
					buf_b += Std.string(test.posInfos.fileName);
					buf_b += ":";
					buf_b += Std.string(test.posInfos.lineNumber);
					buf_b += "(";
					buf_b += Std.string(test.posInfos.className);
					buf_b += ".";
					buf_b += Std.string(test.posInfos.methodName);
					buf_b += ") - ";
				}
				buf_b += Std.string(test.error);
				buf_b += "\n";
				if(test.backtrace != null) {
					buf_b += Std.string(test.backtrace);
					buf_b += "\n";
				}
				buf_b += "\n";
				++failures;
			}
		}
		buf_b += "\n";
		if(failures == 0) {
			buf_b += "OK ";
		} else {
			buf_b += "FAILED ";
		}
		buf_b += Std.string(this.m_tests.length);
		buf_b += " tests, ";
		buf_b += failures == null ? "null" : "" + failures;
		buf_b += " failed, ";
		buf_b += Std.string(this.m_tests.length - failures);
		buf_b += " success";
		buf_b += "\n";
		return buf_b;
	}
	,__class__: haxe_unit_TestResult
};
var haxe_unit_TestRunner = function() {
	this.result = new haxe_unit_TestResult();
	this.cases = new List();
};
haxe_unit_TestRunner.__name__ = ["haxe","unit","TestRunner"];
haxe_unit_TestRunner.print = function(v) {
	var msg = js_Boot.__string_rec(v,"");
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		msg = StringTools.htmlEscape(msg).split("\n").join("<br/>");
		d.innerHTML += msg + "<br/>";
	} else if(typeof process != "undefined" && process.stdout != null && process.stdout.write != null) {
		process.stdout.write(msg);
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
haxe_unit_TestRunner.customTrace = function(v,p) {
	haxe_unit_TestRunner.print(p.fileName + ":" + p.lineNumber + ": " + Std.string(v) + "\n");
};
haxe_unit_TestRunner.prototype = {
	result: null
	,cases: null
	,add: function(c) {
		this.cases.add(c);
	}
	,run: function() {
		this.result = new haxe_unit_TestResult();
		var _g_head = this.cases.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var c = val;
			this.runCase(c);
		}
		haxe_unit_TestRunner.print(this.result.toString());
		return this.result.success;
	}
	,runCase: function(t) {
		var old = haxe_Log.trace;
		haxe_Log.trace = haxe_unit_TestRunner.customTrace;
		var cl = t == null ? null : js_Boot.getClass(t);
		var fields = Type.getInstanceFields(cl);
		haxe_unit_TestRunner.print("Class: " + Type.getClassName(cl) + " ");
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			var fname = f;
			var field = Reflect.field(t,f);
			if(StringTools.startsWith(fname,"test") && Reflect.isFunction(field)) {
				t.currentTest = new haxe_unit_TestStatus();
				t.currentTest.classname = Type.getClassName(cl);
				t.currentTest.method = fname;
				t.setup();
				try {
					var args = [];
					field.apply(t,args);
					if(t.currentTest.done) {
						t.currentTest.success = true;
						haxe_unit_TestRunner.print(".");
					} else {
						t.currentTest.success = false;
						t.currentTest.error = "(warning) no assert";
						haxe_unit_TestRunner.print("W");
					}
				} catch( $e0 ) {
					haxe_CallStack.lastException = $e0;
					if ($e0 instanceof js__$Boot_HaxeError) $e0 = $e0.val;
					if( js_Boot.__instanceof($e0,haxe_unit_TestStatus) ) {
						var e = $e0;
						haxe_unit_TestRunner.print("F");
						var tmp = haxe_CallStack.exceptionStack();
						t.currentTest.backtrace = haxe_CallStack.toString(tmp);
					} else {
					var e1 = $e0;
					haxe_unit_TestRunner.print("E");
					if(e1.message != null) {
						t.currentTest.error = "exception thrown : " + Std.string(e1) + " [" + Std.string(e1.message) + "]";
					} else {
						t.currentTest.error = "exception thrown : " + Std.string(e1);
					}
					var tmp1 = haxe_CallStack.exceptionStack();
					t.currentTest.backtrace = haxe_CallStack.toString(tmp1);
					}
				}
				this.result.add(t.currentTest);
				t.tearDown();
			}
		}
		haxe_unit_TestRunner.print("\n");
		haxe_Log.trace = old;
	}
	,__class__: haxe_unit_TestRunner
};
var haxe_unit_TestStatus = function() {
	this.done = false;
	this.success = false;
};
haxe_unit_TestStatus.__name__ = ["haxe","unit","TestStatus"];
haxe_unit_TestStatus.prototype = {
	done: null
	,success: null
	,error: null
	,method: null
	,classname: null
	,posInfos: null
	,backtrace: null
	,__class__: haxe_unit_TestStatus
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_buffer_Buffer = require("buffer").Buffer;
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
tink_core_TypedError.__name__ = ["tink","core","TypedError"];
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( $e0 ) {
		haxe_CallStack.lastException = $e0;
		if ($e0 instanceof js__$Boot_HaxeError) $e0 = $e0.val;
		if( js_Boot.__instanceof($e0,tink_core_TypedError) ) {
			var e = $e0;
			return tink_core_Outcome.Failure(e);
		} else {
		var e1 = $e0;
		return tink_core_Outcome.Failure(report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e1,pos) : report(e1));
		}
	}
};
tink_core_TypedError.reporter = function(code,message,pos) {
	return function(e) {
		return tink_core_TypedError.withData(code,message,e,pos);
	};
};
tink_core_TypedError.rethrow = function(any) {
	throw js__$Boot_HaxeError.wrap(any);
};
tink_core_TypedError.prototype = {
	message: null
	,code: null
	,data: null
	,pos: null
	,callStack: null
	,exceptionStack: null
	,printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,throwSelf: function() {
		throw new js__$Boot_HaxeError(this);
	}
	,__class__: tink_core_TypedError
};
var tink_core__$Error_Stack_$Impl_$ = {};
tink_core__$Error_Stack_$Impl_$.__name__ = ["tink","core","_Error","Stack_Impl_"];
tink_core__$Error_Stack_$Impl_$.toString = function(this1) {
	return haxe_CallStack.toString(this1);
};
var tink_core__$Lazy_Lazy_$Impl_$ = {};
tink_core__$Lazy_Lazy_$Impl_$.__name__ = ["tink","core","_Lazy","Lazy_Impl_"];
tink_core__$Lazy_Lazy_$Impl_$.get = function(this1) {
	return this1.get();
};
tink_core__$Lazy_Lazy_$Impl_$.ofFunc = function(f) {
	return new tink_core__$Lazy_LazyFunc(f);
};
tink_core__$Lazy_Lazy_$Impl_$.map = function(this1,f) {
	return this1.map(f);
};
tink_core__$Lazy_Lazy_$Impl_$.flatMap = function(this1,f) {
	return this1.flatMap(f);
};
tink_core__$Lazy_Lazy_$Impl_$.ofConst = function(c) {
	return new tink_core__$Lazy_LazyConst(c);
};
var tink_core__$Lazy_LazyObject = function() { };
tink_core__$Lazy_LazyObject.__name__ = ["tink","core","_Lazy","LazyObject"];
tink_core__$Lazy_LazyObject.prototype = {
	get: null
	,map: null
	,flatMap: null
	,__class__: tink_core__$Lazy_LazyObject
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
tink_core__$Lazy_LazyConst.__name__ = ["tink","core","_Lazy","LazyConst"];
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	value: null
	,get: function() {
		return this.value;
	}
	,map: function(f) {
		return new tink_core__$Lazy_LazyConst(f(this.value));
	}
	,flatMap: function(f) {
		return f(this.value);
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var tink_core__$Lazy_LazyFunc = function(f) {
	this.f = f;
};
tink_core__$Lazy_LazyFunc.__name__ = ["tink","core","_Lazy","LazyFunc"];
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyFunc.prototype = {
	f: null
	,result: null
	,get: function() {
		if(this.f != null) {
			this.result = this.f();
			this.f = null;
		}
		return this.result;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var tmp = _gthis.get();
			return f(tmp);
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var this1 = _gthis.get();
			return f(this1).get();
		});
	}
	,__class__: tink_core__$Lazy_LazyFunc
};
var tink_core_Noise = { __ename__ : ["tink","core","Noise"], __constructs__ : ["Noise"] };
tink_core_Noise.Noise = ["Noise",0];
tink_core_Noise.Noise.__enum__ = tink_core_Noise;
var tink_core_Outcome = { __ename__ : ["tink","core","Outcome"], __constructs__ : ["Success","Failure"] };
tink_core_Outcome.Success = function(data) { var $x = ["Success",0,data]; $x.__enum__ = tink_core_Outcome; return $x; };
tink_core_Outcome.Failure = function(failure) { var $x = ["Failure",1,failure]; $x.__enum__ = tink_core_Outcome; return $x; };
var tink_core_OutcomeTools = function() { };
tink_core_OutcomeTools.__name__ = ["tink","core","OutcomeTools"];
tink_core_OutcomeTools.sure = function(outcome) {
	switch(outcome[1]) {
	case 0:
		var data = outcome[2];
		return data;
	case 1:
		var failure = outcome[2];
		if(js_Boot.__instanceof(failure,tink_core_TypedError)) {
			return failure.throwSelf();
		} else {
			throw new js__$Boot_HaxeError(failure);
		}
		break;
	}
};
tink_core_OutcomeTools.toOption = function(outcome) {
	switch(outcome[1]) {
	case 0:
		var data = outcome[2];
		return haxe_ds_Option.Some(data);
	case 1:
		return haxe_ds_Option.None;
	}
};
tink_core_OutcomeTools.toOutcome = function(option,pos) {
	switch(option[1]) {
	case 0:
		var value = option[2];
		return tink_core_Outcome.Success(value);
	case 1:
		return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "Outcome.hx", lineNumber : 37, className : "tink.core.OutcomeTools", methodName : "toOutcome"}));
	}
};
tink_core_OutcomeTools.orNull = function(outcome) {
	switch(outcome[1]) {
	case 0:
		var data = outcome[2];
		return data;
	case 1:
		return null;
	}
};
tink_core_OutcomeTools.orUse = function(outcome,fallback) {
	switch(outcome[1]) {
	case 0:
		var data = outcome[2];
		return data;
	case 1:
		return fallback.get();
	}
};
tink_core_OutcomeTools.orTry = function(outcome,fallback) {
	switch(outcome[1]) {
	case 0:
		return outcome;
	case 1:
		return fallback.get();
	}
};
tink_core_OutcomeTools.equals = function(outcome,to) {
	switch(outcome[1]) {
	case 0:
		var data = outcome[2];
		return data == to;
	case 1:
		return false;
	}
};
tink_core_OutcomeTools.map = function(outcome,transform) {
	switch(outcome[1]) {
	case 0:
		var a = outcome[2];
		return tink_core_Outcome.Success(transform(a));
	case 1:
		var f = outcome[2];
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.isSuccess = function(outcome) {
	if(outcome[1] == 0) {
		return true;
	} else {
		return false;
	}
};
tink_core_OutcomeTools.flatMap = function(o,mapper) {
	return tink_core__$Outcome_OutcomeMapper_$Impl_$.apply(mapper,o);
};
tink_core_OutcomeTools.attempt = function(f,report) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return tink_core_Outcome.Failure(report(e));
	}
};
var tink_core__$Outcome_OutcomeMapper_$Impl_$ = {};
tink_core__$Outcome_OutcomeMapper_$Impl_$.__name__ = ["tink","core","_Outcome","OutcomeMapper_Impl_"];
tink_core__$Outcome_OutcomeMapper_$Impl_$._new = function(f) {
	var this1 = { f : f};
	return this1;
};
tink_core__$Outcome_OutcomeMapper_$Impl_$.apply = function(this1,o) {
	return this1.f(o);
};
tink_core__$Outcome_OutcomeMapper_$Impl_$.withSameError = function(f) {
	return tink_core__$Outcome_OutcomeMapper_$Impl_$._new(function(o) {
		switch(o[1]) {
		case 0:
			var d = o[2];
			return f(d);
		case 1:
			var f1 = o[2];
			return tink_core_Outcome.Failure(f1);
		}
	});
};
tink_core__$Outcome_OutcomeMapper_$Impl_$.withEitherError = function(f) {
	return tink_core__$Outcome_OutcomeMapper_$Impl_$._new(function(o) {
		switch(o[1]) {
		case 0:
			var d = o[2];
			var _g = f(d);
			switch(_g[1]) {
			case 0:
				var d1 = _g[2];
				return tink_core_Outcome.Success(d1);
			case 1:
				var f1 = _g[2];
				return tink_core_Outcome.Failure(haxe_ds_Either.Right(f1));
			}
			break;
		case 1:
			var f2 = o[2];
			return tink_core_Outcome.Failure(haxe_ds_Either.Left(f2));
		}
	});
};
var tink_hxx_Merge = function() { };
tink_hxx_Merge.__name__ = ["tink","hxx","Merge"];
var travix_Logger = function() { };
travix_Logger.__name__ = ["travix","Logger"];
travix_Logger.print = function(s) {
	process.stdout.write(s);
};
travix_Logger.println = function(s) {
	process.stdout.write(s);
	process.stdout.write("\n");
};
travix_Logger.exit = function(code) {
	process.exit(code);
};
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
js_Boot.__toStr = ({ }).toString;
RunTests.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
